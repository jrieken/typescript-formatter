{"version":3,"file":"utils.js","sourceRoot":"","sources":["utils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from \"typescript\";\n\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\nconst TSCONFIG_CACHE: { [filePath: string]: ts.ParsedCommandLine; } = {};\n\nexport function createDefaultFormatCodeSettings(): ts.FormatCodeSettings {\n\n    return {\n        baseIndentSize: 0,\n        indentSize: 4,\n        tabSize: 4,\n        indentStyle: ts.IndentStyle.Smart,\n        newLineCharacter: \"\\r\\n\",\n        convertTabsToSpaces: true,\n        insertSpaceAfterCommaDelimiter: true,\n        insertSpaceAfterSemicolonInForStatements: true,\n        insertSpaceBeforeAndAfterBinaryOperators: true,\n        insertSpaceAfterConstructor: false,\n        insertSpaceAfterKeywordsInControlFlowStatements: true,\n        insertSpaceAfterFunctionKeywordForAnonymousFunctions: false,\n        insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis: false,\n        insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets: false,\n        insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces: true,\n        insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces: false,\n        insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces: false,\n        insertSpaceAfterTypeAssertion: false,\n        insertSpaceBeforeFunctionParenthesis: false,\n        placeOpenBraceOnNewLineForFunctions: false,\n        placeOpenBraceOnNewLineForControlBlocks: false,\n        insertSpaceBeforeTypeAnnotation: false,\n    };\n}\n\nexport function getConfigFileName(baseDir: string, configFileName: string): string | null {\n\n    let configFilePath = path.resolve(baseDir, configFileName);\n    if (fs.existsSync(configFilePath)) {\n        return configFilePath;\n    }\n\n    if (baseDir.length === path.dirname(baseDir).length) {\n        return null;\n    }\n\n    return getConfigFileName(path.resolve(baseDir, \"../\"), configFileName);\n}\n\nexport function readFilesFromTsconfig(configPath: string): string[] {\n    return readTsconfig(configPath).fileNames;\n}\n\nexport function readTsconfig(configPath: string): ts.ParsedCommandLine {\n    if (TSCONFIG_CACHE[configPath]) {\n        return TSCONFIG_CACHE[configPath];\n    }\n\n    // for `extends` support. It supported from TypeScript 2.1.1.\n    // `& { readFile(path: string): string; }` is backword compat for TypeScript compiler 2.0.3 support.\n    const host: ts.ParseConfigHost & { readFile(path: string): string; } = {\n        useCaseSensitiveFileNames: ts.sys.useCaseSensitiveFileNames,\n        readDirectory: ts.sys.readDirectory,\n        fileExists: path => fs.existsSync(path),\n        readFile: (path: string) => fs.readFileSync(path, \"utf-8\"),\n    };\n    let rootConfig = parseJSON(fs.readFileSync(configPath, \"utf-8\"));\n    let parsed = ts.parseJsonConfigFileContent(rootConfig, host, path.dirname(configPath));\n    if (parsed.errors && parsed.errors.length !== 0) {\n        throw new Error(parsed.errors.map(e => e.messageText).join(\"\\n\"));\n    }\n\n    TSCONFIG_CACHE[configPath] = parsed;\n\n    return parsed;\n}\n\nexport function parseJSON(jsonText: string): any {\n    let result = ts.parseConfigFileTextToJson(\"tmp.json\", jsonText);\n    if (result.error) {\n        throw new Error(\"JSON parse error\");\n    }\n\n    return result.config;\n}\n"]}