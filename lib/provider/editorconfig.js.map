{"version":3,"file":"editorconfig.js","sourceRoot":"","sources":["editorconfig.ts"],"names":[],"mappings":";;;AAEA,6CAA6C;AAI7C,IAAI,kBAAkB,GAAG,KAAK,CAAC;AAE/B,SAAgB,qBAAqB,CAAC,QAAgB,EAAE,IAAa,EAAE,cAAqC;IAExG,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,IAAI,CAAC,kBAAkB,EAAE,CAAC;QACtD,OAAO,CAAC,GAAG,CAAC,+CAA+C,CAAC,CAAC;QAC7D,kBAAkB,GAAG,IAAI,CAAC;IAC9B,CAAC;IAED,OAAO,YAAY;SACd,KAAK,CAAC,QAAQ,CAAC;SACf,IAAI,CAAC,MAAM,CAAC,EAAE;QACX,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACnC,OAAO,cAAc,CAAC;QAC1B,CAAC;QACD,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,OAAO,CAAC,GAAG,CAAC,kBAAkB,GAAG,QAAQ,GAAG,QAAQ,GAAG,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;QACnG,CAAC;QAED,IAAI,MAAM,CAAC,YAAY,KAAK,KAAK,EAAE,CAAC;YAChC,cAAc,CAAC,mBAAmB,GAAG,KAAK,CAAC;YAC3C,8CAA8C;YAC9C,uCAAuC;YACvC,IAAI;QACR,CAAC;aAAM,IAAI,OAAO,MAAM,CAAC,WAAW,KAAK,QAAQ,EAAE,CAAC;YAChD,cAAc,CAAC,mBAAmB,GAAG,IAAI,CAAC;YAC1C,cAAc,CAAC,UAAU,GAAG,MAAM,CAAC,WAAW,CAAC;QACnD,CAAC;QACD,IAAI,MAAM,CAAC,WAAW,KAAK,IAAI,EAAE,CAAC;YAC9B,cAAc,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAC3C,CAAC;aAAM,IAAI,MAAM,CAAC,WAAW,KAAK,IAAI,EAAE,CAAC;YACrC,cAAc,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAC3C,CAAC;aAAM,IAAI,MAAM,CAAC,WAAW,KAAK,MAAM,EAAE,CAAC;YACvC,cAAc,CAAC,gBAAgB,GAAG,MAAM,CAAC;QAC7C,CAAC;QAED,OAAO,cAAc,CAAC;IAC1B,CAAC,CAAC,CAAC;AACX,CAAC;AApCD,sDAoCC;AAGD,SAAgB,WAAW,CAAC,QAAgB,EAAE,aAAqB,EAAE,IAAa,EAAE,eAAsC;IAEtH,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,IAAI,CAAC,kBAAkB,EAAE,CAAC;QACtD,OAAO,CAAC,GAAG,CAAC,+CAA+C,CAAC,CAAC;QAC7D,kBAAkB,GAAG,IAAI,CAAC;IAC9B,CAAC;IAED,OAAO,YAAY;SACd,KAAK,CAAC,QAAQ,CAAC;SACf,IAAI,CAAC,MAAM,CAAC,EAAE;QACX,IAAI,MAAM,CAAC,oBAAoB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC;YAC5D,aAAa,IAAI,IAAI,CAAC;QAC1B,CAAC;QACD,OAAO,aAAa,CAAC;IACzB,CAAC,CAAC,CAAC;AACX,CAAC;AAfD,kCAeC","sourcesContent":["import * as ts from \"typescript\";\n\nimport * as editorconfig from \"editorconfig\";\n\nimport { Options } from \"../\";\n\nlet emitBaseDirWarning = false;\n\nexport function makeFormatCodeOptions(fileName: string, opts: Options, formatSettings: ts.FormatCodeSettings): Promise<ts.FormatCodeSettings> {\n\n    if (opts.verbose && opts.baseDir && !emitBaseDirWarning) {\n        console.log(\"editorconfig is not supported baseDir options\");\n        emitBaseDirWarning = true;\n    }\n\n    return editorconfig\n        .parse(fileName)\n        .then(config => {\n            if (Object.keys(config).length === 0) {\n                return formatSettings;\n            }\n            if (opts.verbose) {\n                console.log(\"editorconfig: \\n\" + \"file: \" + fileName + \"\\n\" + JSON.stringify(config, null, 2));\n            }\n\n            if (config.indent_style === \"tab\") {\n                formatSettings.convertTabsToSpaces = false;\n                // if (typeof config.tab_width === \"number\") {\n                // \toptions.TabSize = config.tab_width;\n                // }\n            } else if (typeof config.indent_size === \"number\") {\n                formatSettings.convertTabsToSpaces = true;\n                formatSettings.indentSize = config.indent_size;\n            }\n            if (config.end_of_line === \"lf\") {\n                formatSettings.newLineCharacter = \"\\n\";\n            } else if (config.end_of_line === \"cr\") {\n                formatSettings.newLineCharacter = \"\\r\";\n            } else if (config.end_of_line === \"crlf\") {\n                formatSettings.newLineCharacter = \"\\r\\n\";\n            }\n\n            return formatSettings;\n        });\n}\n\n\nexport function postProcess(fileName: string, formattedCode: string, opts: Options, _formatSettings: ts.FormatCodeSettings): Promise<string> {\n\n    if (opts.verbose && opts.baseDir && !emitBaseDirWarning) {\n        console.log(\"editorconfig is not supported baseDir options\");\n        emitBaseDirWarning = true;\n    }\n\n    return editorconfig\n        .parse(fileName)\n        .then(config => {\n            if (config.insert_final_newline && !/\\n$/.test(formattedCode)) {\n                formattedCode += \"\\n\";\n            }\n            return formattedCode;\n        });\n}\n"]}