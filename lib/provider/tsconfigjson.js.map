{"version":3,"file":"tsconfigjson.js","sourceRoot":"","sources":["tsconfigjson.ts"],"names":[],"mappings":";;;AAAA,iCAAiC;AAEjC,6BAA6B;AAG7B,oCAA2D;AAE3D,SAAgB,qBAAqB,CAAC,QAAgB,EAAE,IAAa,EAAE,cAAqC;IAExG,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC/F,IAAI,cAA6B,CAAC;IAClC,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC;QAC1D,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC;IACvC,CAAC;SAAM,CAAC;QACJ,cAAc,GAAG,IAAA,yBAAiB,EAAC,OAAO,EAAE,IAAI,CAAC,YAAY,IAAI,eAAe,CAAC,CAAC;IACtF,CAAC;IACD,IAAI,CAAC,cAAc,EAAE,CAAC;QAClB,OAAO,cAAc,CAAC;IAC1B,CAAC;IACD,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,OAAO,CAAC,GAAG,CAAC,QAAQ,cAAc,QAAQ,QAAQ,EAAE,CAAC,CAAC;IAC1D,CAAC;IAED,IAAI,MAAM,GAAG,IAAA,oBAAY,EAAC,cAAc,CAAC,CAAC;IAC1C,IAAI,MAAM,CAAC,OAAO,CAAC,OAAO,KAAK,EAAE,CAAC,WAAW,CAAC,sBAAsB,EAAE,CAAC;QACnE,cAAc,CAAC,gBAAgB,GAAG,MAAM,CAAC;IAC7C,CAAC;SAAM,IAAI,MAAM,CAAC,OAAO,CAAC,OAAO,KAAK,EAAE,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;QAC5D,cAAc,CAAC,gBAAgB,GAAG,IAAI,CAAC;IAC3C,CAAC;IAED,OAAO,cAAc,CAAC;AAC1B,CAAC;AAxBD,sDAwBC","sourcesContent":["import * as ts from \"typescript\";\n\nimport * as path from \"path\";\n\nimport { Options } from \"../\";\nimport { getConfigFileName, readTsconfig } from \"../utils\";\n\nexport function makeFormatCodeOptions(fileName: string, opts: Options, formatSettings: ts.FormatCodeSettings): ts.FormatCodeSettings {\n\n    let baseDir = opts.baseDir ? path.resolve(opts.baseDir) : path.dirname(path.resolve(fileName));\n    let configFileName: string | null;\n    if (opts.tsconfigFile && path.isAbsolute(opts.tsconfigFile)) {\n        configFileName = opts.tsconfigFile;\n    } else {\n        configFileName = getConfigFileName(baseDir, opts.tsconfigFile || \"tsconfig.json\");\n    }\n    if (!configFileName) {\n        return formatSettings;\n    }\n    if (opts.verbose) {\n        console.log(`read ${configFileName} for ${fileName}`);\n    }\n\n    let parsed = readTsconfig(configFileName);\n    if (parsed.options.newLine === ts.NewLineKind.CarriageReturnLineFeed) {\n        formatSettings.newLineCharacter = \"\\r\\n\";\n    } else if (parsed.options.newLine === ts.NewLineKind.LineFeed) {\n        formatSettings.newLineCharacter = \"\\n\";\n    }\n\n    return formatSettings;\n}\n"]}