{"version":3,"file":"tslintjson.js","sourceRoot":"","sources":["tslintjson.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from \"typescript\";\nimport { IOptions as TslintOptions } from \"tslint\";\nimport * as path from \"path\";\n\nimport { Options } from \"../\";\nimport { getConfigFileName } from \"../utils\";\nimport { Mutable } from \"./base\";\n\n\nexport interface AdditionalFormatSettings {\n    $noConsecutiveBlankLines: boolean;\n}\n\nexport async function makeFormatCodeOptions(fileName: string, opts: Options, formatSettings: Mutable<ts.FormatCodeSettings>): Promise<ts.FormatCodeSettings> {\n\n    const rules = await getRules(fileName, opts);\n\n    if (!rules) {\n        return formatSettings;\n    }\n\n    const indent = rules.get(\"indent\");\n    const whitespace = rules.get(\"whitespace\");\n\n    if (indent && indent.ruleArguments) {\n        switch (indent.ruleArguments[0]) {\n            case \"spaces\":\n                formatSettings.convertTabsToSpaces = true;\n                break;\n            case \"tabs\":\n                formatSettings.convertTabsToSpaces = false;\n                break;\n            default:\n                break;\n        }\n    }\n    if (whitespace && whitespace.ruleArguments) {\n        for (let p in whitespace.ruleArguments) {\n            switch (whitespace.ruleArguments[p]) {\n                case \"check-branch\":\n                    formatSettings.insertSpaceAfterKeywordsInControlFlowStatements = true;\n                    break;\n                case \"check-operator\":\n                    formatSettings.insertSpaceBeforeAndAfterBinaryOperators = true;\n                    break;\n                case \"check-separator\":\n                    formatSettings.insertSpaceAfterCommaDelimiter = true;\n                    formatSettings.insertSpaceAfterSemicolonInForStatements = true;\n                    break;\n                case \"check-typecast\":\n                    formatSettings.insertSpaceAfterTypeAssertion = true;\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n\n    return formatSettings;\n}\n\nexport async function postProcess(fileName: string, formattedCode: string, opts: Options, _formatSettings: ts.FormatCodeSettings): Promise<string> {\n\n    const rules = await getRules(fileName, opts);\n\n    if (!rules) {\n        return formattedCode;\n    }\n\n    if (rules.has(\"no-consecutive-blank-lines\")) {\n        formattedCode = formattedCode.replace(/\\n+^$/mg, \"\\n\");\n    }\n\n    return formattedCode;\n}\n\nasync function getRules(fileName: string, opts: Options): Promise<Map<string, Partial<TslintOptions>> | undefined> {\n    const baseDir = opts.baseDir ? path.resolve(opts.baseDir) : path.dirname(path.resolve(fileName));\n\n    let configFileName: string | null;\n    if (opts.tslintFile && path.isAbsolute(opts.tslintFile)) {\n        configFileName = opts.tslintFile;\n    } else {\n        configFileName = getConfigFileName(baseDir, opts.tslintFile || \"tslint.json\");\n    }\n\n    if (!configFileName) {\n        return undefined;\n    }\n\n    if (opts.verbose) {\n        console.log(`read ${configFileName} for ${fileName}`);\n    }\n\n    const { Configuration } = await import(\"tslint\");\n    const { rules } = Configuration.loadConfigurationFromPath(configFileName);\n    return rules;\n}\n"]}