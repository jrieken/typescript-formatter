{"version":3,"file":"formatter.js","sourceRoot":"","sources":["formatter.ts"],"names":[],"mappings":";;;AAAA,iCAAiC;AAEjC,mCAA0D;AAE1D,MAAM,mBAAmB;IACrB,KAAK,GAAmC,EAAE,CAAC;IAC3C,OAAO,CAAC,QAAgB,EAAE,IAAY;QAClC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IAC9D,CAAC;IAED,UAAU,CAAC,IAAY;QACnB,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAED,QAAQ,CAAC,IAAY;QACjB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAE,CAAC,SAAS,EAAE,CAAC,CAAC;IACvE,CAAC;IAED,6BAA6B;IAE7B,sBAAsB,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,yBAAyB,EAAE,CAAC;IAC9D,kBAAkB,GAAG,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACnD,gBAAgB,GAAG,CAAC,SAAiB,EAAE,EAAE,CAAC,GAAG,CAAC;IAC9C,iBAAiB,GAAG,CAAC,QAAgB,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IAC/D,mBAAmB,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;IAC1C,qBAAqB,GAAG,CAAC,OAA2B,EAAE,EAAE,CAAC,EAAE,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;CAC9F;AAED,SAAgB,MAAM,CAAC,QAAgB,EAAE,IAAY,EAAE,OAAO,GAAG,IAAA,uCAA+B,GAAE;IAC9F,MAAM,IAAI,GAAG,IAAI,mBAAmB,EAAE,CAAC;IACvC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IAE7B,MAAM,eAAe,GAAG,EAAE,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;IACvD,MAAM,KAAK,GAAG,eAAe,CAAC,6BAA6B,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC/E,KAAK;SACA,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;SAC3C,OAAO,EAAE;SACT,OAAO,CAAC,IAAI,CAAC,EAAE;QACZ,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC5C,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC5D,IAAI,GAAG,GAAG,IAAI,GAAG,IAAI,CAAC,OAAO,GAAG,IAAI,EAAE,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEP,OAAO,IAAI,CAAC;AAChB,CAAC;AAhBD,wBAgBC","sourcesContent":["import * as ts from \"typescript\";\n\nimport { createDefaultFormatCodeSettings } from \"./utils\";\n\nclass LanguageServiceHost implements ts.LanguageServiceHost {\n    files: ts.MapLike<ts.IScriptSnapshot> = {};\n    addFile(fileName: string, text: string) {\n        this.files[fileName] = ts.ScriptSnapshot.fromString(text);\n    }\n\n    fileExists(path: string): boolean {\n        return !!this.files[path];\n    }\n\n    readFile(path: string): string | undefined {\n        return this.files[path]?.getText(0, this.files[path]!.getLength());\n    }\n\n    // for ts.LanguageServiceHost\n\n    getCompilationSettings = () => ts.getDefaultCompilerOptions();\n    getScriptFileNames = () => Object.keys(this.files);\n    getScriptVersion = (_fileName: string) => \"0\";\n    getScriptSnapshot = (fileName: string) => this.files[fileName];\n    getCurrentDirectory = () => process.cwd();\n    getDefaultLibFileName = (options: ts.CompilerOptions) => ts.getDefaultLibFilePath(options);\n}\n\nexport function format(fileName: string, text: string, options = createDefaultFormatCodeSettings()) {\n    const host = new LanguageServiceHost();\n    host.addFile(fileName, text);\n\n    const languageService = ts.createLanguageService(host);\n    const edits = languageService.getFormattingEditsForDocument(fileName, options);\n    edits\n        .sort((a, b) => a.span.start - b.span.start)\n        .reverse()\n        .forEach(edit => {\n            const head = text.slice(0, edit.span.start);\n            const tail = text.slice(edit.span.start + edit.span.length);\n            text = `${head}${edit.newText}${tail}`;\n        });\n\n    return text;\n}\n"]}